#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor; 

// output to Fragment Shader
out vec4 v_color;

out vec3 normal;          // Transformed normal in View Space
out vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
out vec4 lightVector;     // Vector from the vertex to the Light in View Space
						  // Length of lightVector is the distance between light and vertex

// Uniform
// Values that stay constant for the whole mesh.
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectionTransform;

// light position
uniform vec4 WorldLightPosition; // if w = 1: Point light, if w = 0: directional light


void main()
{
	mat4 MV = ViewTransform * WorldTransform;
	mat4 MVP = ProjectionTransform * MV;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace, 1);
	v_color = vec4(vertexColor, 1.0f);

	normal = (MV * vec4(vertexNormal_modelspace, 0)).xyz;
	
	// Set up for caluclating the eyeVector
	vec3 vertexPosition_CameraSpace = (MV * vec4(vertexPosition_modelspace, 1)).xyz;
	eyeVector = - vertexPosition_CameraSpace;
	
	// Set up for calculating the lightVector
	vec4 lightPosition_CameraSpace = ViewTransform * WorldLightPosition;
	lightVector = MV * (lightPosition_CameraSpace + vec4(eyeVector, 0));

}
