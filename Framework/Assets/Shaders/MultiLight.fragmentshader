#version 330 core

struct LightProperties
{
	bool isEnabled;
	bool isLocal;
	bool isSpot;
	vec3 ambient;
	vec3 color;
	vec3 position;
	vec3 halfVector;
	vec3 coneDirection;
	float spotCosCutoff;
	float spotExponent;
	float constantAttenuation;
	float linearAttenuation;
	float quadraticAttenuation;
}

LightProperties light0;
light0.isEnabled = true;
light0.isLocal = true;
light0.isSpot = false;
light0.ambient = vec3(0.0, 0.0, 0.0);
light0.color = vec3(1.0f, 1.0f, 0.0f);
light0.position = vec3(32.0, 32.0, 10.0);
light0.coneDirection = vec3(-1.0, -1.0, 0.0);
light0.spotCosCutOff = 45.0f;
light0.spotExponent = 0.0f;
light0.constantAttenuation = 0.2f;
light0.linearAttenuation = 0.8f;
light0.quadraticAttenuation = 0.2f;

const int MaxLights = 8;
uniform LightProperties Lights[MaxLights];

uniform float Shininess;
uniform float Strength;
uniform vec3 EyeDirection;

in vec4 v_color;
in vec4 position;

out vec4 color;

void main()
{
	vec3 scatteredLight = vec3(0.0);
	vec3 reflectedLight = vec3(0.0);

	for(int light = 0; light < MaxLights; ++light)
	{
		if(! Lights[light].isEnabled)
			continue;

		vec3 halfVector;
		vec3 lightDirection = Lights[light].position;
		float attenuation = 1.0;

		if(Lights[light].isLocal)
		{
			lightDirection = lightDirection - vec3(position);
			float lightDistance = length(lightDirection);
			lightDirection = lightDirection / lightDistance;

			attenuation = 1.0 /
						(Lights[light].constantAttenuation
						+ Lights[light].linearAttenuation * lightDistance
						+ Lights[light].quadraticAttenuation * lightDistance * lightDistance);

						if(Lights[light].isSpot)
						{
							float spotCos = dot(lightDirection, -Lights[light].coneDirection);
							if(spotCos < Lights[light].spotCosCuoff)
								attenuation = 0.0;
							else
								attenuation *= pow(spotCos, Lights[light].spotExponent);
						}

			halfVector = normalize(lightDirection + EyeDirection);
		} else {
			halfVector = Lights[light].halfVector;
		}

		float diffuse = max(0.0, dot(normal, lightDirection));
		float specular = max(0.0, dot(normal, halfVector));

		if(diffuse == 0.0)
			specular == 0.0;
		else
			specular = pow(specular, Shininess) * Strength;

		scatteredLight += Lights[light].ambient * attenuation +	Lights[light].color * diffuse * attenuation;
		reflectedLight += Lights[light].color * specular * attenuation;
	}

	vec3 rgb = min(v_color.rgb * scatteredLight + reflectedLight, vec3(1.0));
	color = vec4(rgb, v_color.a);
}
