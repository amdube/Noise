#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor; 

// Values that stay constant for the whole mesh.
uniform mat4 ViewProjectionTransform;
uniform mat4 WorldTransform;
uniform vec3 LightLocation;
uniform vec3 LightColor;

// Outputs to fragment shader
out vec3 normal;  // You will need this when you do per-fragment lighting
out vec4 v_color;

void main()
{

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  ViewProjectionTransform * WorldTransform * vec4(vertexPosition_modelspace, 1);

	v_color = vec4(vertexColor, 1.0f);

	vec3 eyeVector = (WorldTransform * vec4(vertexPosition_modelspace, 1)).xyz;
	vec3 normal = (WorldTransform * vec4(vertexNormal_modespace, 0)).xyz;
	vec3 lightPosition = (ViewProjectionTransform * vec4(LightLocation, 1)).xyz;
	vec3 lightVector = lightPosition + eyeVector;

	vec3 norm = normalize(normal);

	vec3 normLight = normalize(LightColor);

	float cosTheta = clamp(dot(-n, -1), 0, 1);

	// Diffuse
	vec3 diffuseColor = vec3(v_color * cosTheta * LightColor);
	//Ambient
	vec3 ambientColor = vec3(v_color);
	//Specular
	vec3 normEye = normalize(eyeVector);
	vec3 reflection = reflect(normLight, norm);
	float cosAlpha = clamp(dot(normEye, reflection), 0, 1);

	// Final color
	v_color = ambientColor + diffuseColor;
}

