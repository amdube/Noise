#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor; 

// Values that stay constant for the whole mesh.
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectionTransform; 

// Outputs to fragment shader
out vec3 normal;  // You will need this when you do per-fragment lighting
out vec3 eyeVector; 

out vec4 v_color;

void main()
{
	mat4 MV = ViewTransform * WorldTransform;
	mat4 MVP = ProjectionTransform * MV;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position = MVP * vec4(vertexPosition_modelspace,1);

	normal = (transpose(inverse(MV)) * vec4(vertexNormal_modelspace,0.0)).xyz;

	// Set up for caluclating the eyeVector
	vec3 vertexPosition_CameraSpace = (MV * vec4(vertexPosition_modelspace,1.0)).xyz;
	eyeVector = -vertexPosition_CameraSpace;

	v_color = vec4(vertexColor, 1.0f);
}

